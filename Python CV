import cv2
import numpy as np
import math
import serial

cap = cv2.VideoCapture(0)

x, y, w, h = 100, 100, 200, 200

# Указываем порт, к которому подключена Arduino
portNo = "COM9"
uart = serial.Serial(portNo, 9600)

while True:

    ret, frame = cap.read()
    frame = cv2.flip(frame, 1)
    kernel = np.ones((3, 3), np.uint8)

    mask = np.zeros_like(frame[:, :, 0])
    mask[y:y + h, x:x + w] = 255
    cv2.rectangle(frame, (100, 100), (300, 300), (20, 0, 255), 5)

    masked_frame = cv2.bitwise_and(frame, frame, mask=mask)

    hsv = cv2.cvtColor(masked_frame, cv2.COLOR_BGR2HSV)
    lower_skin = np.array([0, 20, 70], dtype=np.uint8)
    upper_skin = np.array([20, 255, 255], dtype=np.uint8)
    mask_skin = cv2.inRange(hsv, lower_skin, upper_skin)
    mask_skin = cv2.dilate(mask_skin, kernel, iterations=4)
    mask_skin = cv2.GaussianBlur(mask_skin, (5, 5), 100)

    contours, hierarchy = cv2.findContours(mask_skin, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        if cv2.contourArea(cnt) < 2000:
            continue

        epsilon = 0.0005 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)
        hull = cv2.convexHull(cnt)
        areahull = cv2.contourArea(hull)
        areacnt = cv2.contourArea(cnt)
        arearatio = ((areahull - areacnt) / areacnt) * 100
        hull = cv2.convexHull(approx, returnPoints=False)
        defects = cv2.convexityDefects(approx, hull)

        l = 0
        for i in range(defects.shape[0]):
            s, e, f, d = defects[i, 0]
            start = tuple(approx[s][0])
            end = tuple(approx[e][0])
            far = tuple(approx[f][0])
            a = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
            b = math.sqrt((far[0] - start[0]) ** 2 + (far[1] - start[1]) ** 2)
            c = math.sqrt((end[0] - far[0]) ** 2 + (end[1] - far[1]) ** 2)
            s = (a + b + c) / 2
            ar = math.sqrt(s * (s - a) * (s - b) * (s - c))
            d = (2 * ar) / a
            angle = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c)) * 57
            if angle <= 90 and d > 30:
                l += 1
        l += 1
        msg = 0
        if l == 1:
            if areacnt >= 2000:
                if arearatio < 8:
                    cv2.putText(frame, '0', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
                    msg = 0
                    uart.write(str.encode(str(msg)))
                else:
                    cv2.putText(frame, '1', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
                    msg = 1
                    uart.write(str.encode(str(msg)))
        elif l == 2:
            cv2.putText(frame, '2', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
            msg = 2
            uart.write(str.encode(str(msg)))
        elif l == 3:
            if arearatio < 27:
                cv2.putText(frame, '3', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
                msg = 3
                uart.write(str.encode(str(msg)))
        elif l == 4:
            cv2.putText(frame, '4', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
            msg = 4
            uart.write(str.encode(str(msg)))
        elif l == 5:
            cv2.putText(frame, '5', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3, cv2.LINE_AA)
            msg = 5
            uart.write(str.encode(str(msg)))
        print(msg)
    cv2.imshow('frame', frame)
    cv2.imshow('masked_frame', masked_frame)
    cv2.imshow('mask_skin', mask_skin)

    if cv2.waitKey(1) == ord('q'):
        break

cv2.destroyAllWindows()
cap.release()
